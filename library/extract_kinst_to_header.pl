#!/opt/local/bin/perl
#
# National Center for Atmospheric Research. (NCAR)
# High Altitude Observatory. (HAO)
# Boulder, Colorado. USA
# Created by Jose Humberto Garcia. October 1998 (jgarcia@ucar.edu)
# This script reads kinst.file to then write CEDARKinst.h
# The resulting header file is used by CEDARReadKinst.h (and therefore by the rest of the DODS-CEDAR software)
# to map numeric KINST (3rd field of a CEDAR data record) readed from any cbf file 
# into it Text information.
#--------------------------------------------------------------------------------------------------------------

if (open (SOURCE, "kinst.file"))
{    
# First we count how many lines are in kinst.file
    $line=<SOURCE>;
    $counter=0;
    while ($line ne ""){
	$counter++;
	$line=<SOURCE>;
    }
    close (SOURCE);
    open (SOURCE, "kinst.file") || die ("Can not open kinst.file\n");
    $line=<SOURCE>;
    open (TARGET, ">CedarKinst.h");
    print TARGET "/* Do not edit this file, it was generated by \"extract_kinst_to_header.pl\" based on \"kinst.file\" */\n\n";
    print TARGET "#ifndef CedarKinst_h_\n#define  CedarKinst_h_ 1\n\n";
    print TARGET "#define KINST_ROWS $counter\n";
    print TARGET "#define KINST_COLUMNS 2\n\n";
# We made a 2 dimensional array kinst of char*
# The first column is the instrument numeric code.
# The second column is the data about that instrument.
    print TARGET "static const char* kinst[KINST_ROWS][KINST_COLUMNS]=\n{\n";
    $j=1;
    while ($line ne ""){
	chop ($line);
	@array=split(//,$line);            # For every line in the file we split it into an array of char
	print TARGET "    { \"";
	$string="";
	for ($i=0; $i<8; $i++){
	    $string.=$array[$i];           # characters 0,1,...,7 are for the instrument numeric code
	}
	$string=~ s/^( *)([0-9]+) $/$2/;   # This regular expression removes any heading white spaces
	print TARGET $string;
	print TARGET "\",\t\"";
	$string="";
	for ($i=8;$i<85; $i++){            
	    $string.=$array[$i];           # characters 8,9,...,84 are for the instrument numeric code
	}
	$string=~ s/(\S+)( +)$/$1/;        # This regular expression removes any trailing white spaces
	print TARGET $string;
	print TARGET "\"";
	if ($j < $counter){                # as long this is not the last line we have to print a comma and then return...
	    print TARGET " },\n";
	}
	else {
	    print TARGET " }\n";
	}
	$line=<SOURCE>;
	$j++;
    }
    print TARGET "};\n";
    print TARGET "#endif // CedarKinst_h_ \n";
    close (SOURCE);
    close (TARGET);
}
else {
    print "Could not open source file\n";
}
