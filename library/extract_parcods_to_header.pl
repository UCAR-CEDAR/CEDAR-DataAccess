#!/opt/local/bin/perl
#
# National Center for Atmospheric Research. (NCAR)
# High Altitude Observatory. (HAO)
# Boulder, Colorado. USA
# Created by Jose Humberto Garcia. October 1998 (jgarcia@ucar.edu)
# This script reads parcods.file to then write CEDARParcods.h
# The resulting header file is used by CEDARReadParcods.h (and therefore by the rest of the DODS-CEDAR software)
# to map parameters numeric values (codes for JPAR and MPAR variables section of the data records) 
# readed from any cbf file into any requiered column such as the parameter long name, its units, etc.
#
# This algorithm is based on /home/bozo/is/docs/parcods.notes
#
#--------------------------------------------------------------------------------------------------------------



if (open (SOURCE, "parcods.file"))
{    
# First we count the number of lines in parcods.file
    $line=<SOURCE>;
    $counter=0;
    while ($line ne ""){
	$counter++;
	$line=<SOURCE>;
    }
    close (SOURCE);
    open (SOURCE, "parcods.file");
    $line=<SOURCE>;
    open (TARGET, ">CedarParcods.h");
    print TARGET "/* Do not edit this file, it was generated by \"extract_parcods_to_header.pl\" based on \"parcods.file\" */\n\n";
    print TARGET "#ifndef CedarParcods_h_\n#define  CedarParcods_h_ 1\n\n";
    print TARGET "#define PARCODS_ROWS $counter\n";
    print TARGET "#define PARCODS_COLUMNS 6\n\n";
# The two dimenional array is parcods which is an array of char*
# There are as many rows for this two dimensional array as lines in parcods.file
# There are 6 columns for the parcods array:
# Column 1; parameter code number
# Column 2; parameter code long name
# Column 3; parameter code short name
# Column 4; parameter code madrigal name
# Column 5; parameter code Multiplier used to convert the integer value of IPCOD to units of PCULBL.
# Column 6; parameter code Units label (e.g., m/s)
    print TARGET "static const char* parcods[$counter][6]=\n{\n";
    $j=1;
    while ($line ne ""){
	chop ($line);
	@array=split(//,$line);        # For every line we split it into an array of characters
	print TARGET "    { \"";
	$string="";
	for ($i=2; $i<6; $i++){
	    $string.=$array[$i];       # We use characters 2,3,4 and 5 for the parameter code number
	}
	$string=~ s/( +)([0-9]+)$/$2/; # This regular expresion cleans any heading white spaces
	print TARGET $string;          # Writing column 1...
	print TARGET "\",\t\"";
	$string="";
	for ($i=7;$i<47; $i++){
	    $string.=$array[$i];       # We use characters 7,8,9,...,46 for the parameter code long name
	}
	$string=~ s/(\S+)( +)$/$1/;    # This regular expresion cleans any trailing white spaces
	print TARGET $string;          # Writing column 2...
	print TARGET "\",\t\"";
	$string="";
	for ($i=48;$i<59; $i++){
	    $string.=$array[$i];       # We use characters 48,49,...,58 for the parameter code short name
	}
	$string=~ s/(\S+)( +)$/$1/;
	print TARGET $string;          # Writing column 3...
	print TARGET  "\",\t\"";
	$string="";
	for ($i=60;$i<66; $i++){
	    $string.=$array[$i];       # We use characters 60,61,...,65 for the parameter code madrigal name
	}
	$string=~ s/(\S+)( +)$/$1/;
	print TARGET $string;          # Writing column 4...
	print TARGET "\",\t\"";
	$string="";
	for ($i=67;$i<73; $i++){
	    $string.=$array[$i];       # We use characters 67,68,...,72 for the parameter code multiplier
	}
	$string=~ s/(\S+)( +)$/$1/;
	print TARGET $string;          # Writing column 5...
	print TARGET "\",\t\"";
	$string="";
	for ($i=74;$i<82; $i++){
	    $string.=$array[$i];       # We use characters 74,75,...,82 for the parameter code units
	}
	$string=~ s/(\S*)( +)$/$1/;
	print TARGET $string;          # Writing column 6...
	print TARGET "\"";
	if ($j < $counter){            # Here we need to chech if this is the last line we just put a return else we put comma and then return
	    print TARGET " },\n";
	}
	else {
	    print TARGET " }\n";
	}
	$line=<SOURCE>;
	$j++;
    }
    print TARGET "};\n";
    print TARGET "#endif // CedarParcods_h_ \n";
    close (SOURCE);
    close (TARGET);
}
else {
    print "Could not open source file\n";
}
