
	$Id: INSTALL 18355 2008-04-16 04:56:12Z pwest $

Updated for version 2.2.2 of the Cedar++ Library

Installing the Cedar++ Library

---------------------------------------------------------------------------

BUILDING THE SOFTWARE
BUILD REQUIREMENTS
NOTES
CONFIGURATION AND TESTING

---------------------------------------------------------------------------

BUILDING THE SOFTWARE

  To build the CEDAR library, follow these steps:

  0. Please skim BUILD REQUIREMENTS and NOTES sections of this file before
     reporting problems. Make sure you read over the CONFIGURATION AND
     TESTING section!
     Thanks.

  1. Type `./configure' at the system prompt. On some systems you may have
     to type `sh configure'.

  2. Type `make' to build the software, `make check' to run the tests. You
     must have DejaGNU to run `make check.' If you have cppunit installed
     then additional tests will be run. We recommend that you install
     cppunit if you have not already.

  3. Type `make install' to install the Cedar++ library. The package installs
     in /usr/local/ by default; use --prefix to change that.

Building from Our SVN Repository

  If you are building from a SVN checkout, run 'autoreconf --verbose' before
  './configure; make; make check; make install'. If you try to run autoconf
  by hand and wind up with build files that don't work, use 'autoreconf
  --force --verbose' and then './configure; make; make check; make install'.

AFTER INSTALLING

  o Set PATH environment variable to include the bin directory of where
  Cedar++ was installed. For example, if using the default installation
  directory, which is /usr/local, make sure that /usr/local/bin is on your
  path.

  o Set LD_LIBRARY_PATH environment variable to include the lib directory of
  where Cedar++ was installed. For example, if using the default installation
  directory, which is /usr/local, make sure that /usr/local/lib is part of
  LD_LIBRARY_PATH. You might want to add the following about LIBRARY PATH:
  If you have set $prefix so that the libraries are installed in a directory
  that's included in ld.so.conf (linux, other systems may use a slightly
  different name) you don't have to use LD_LIBRARY_PATH but, if you don't,
  make sure to re-run ldconfig.

BUILD REQUIREMENTS

  o To build from a fresh SVN checkout, you'll need automake 1.9.2, autoconf
    2.59 (2.57 will probably work and that's what's listed in the configure.ac
    file) and libtool 1.5.6. Earlier versions may work, but may cause
    problems, particularly with the 'distcheck' target for make. Given those
    requirements, use 'autoreconf --force --verbose' and then build as
    described above.

    If you have an Intel Mac and you are experiencing configuration issues
    then you might need to download the latest and greatest autoconf,
    automake, and libtool using the DarwinPorts tool. We've tried using
    other download tools, like fink, and building from source these
    packages, but only DarwinPorts seems to resolve the issues. We continue
    to watch this issue and hope to get it resolved soon.

  o You should have gcc/g++ 3.3.x or greater. You'll also need to get the
    stdc++ library that matches the compiler (whatever version). NB: gcc
    2.8.x and earlier *won't* build the software. We're working on modifying
    the software so that it will build with a variety of compilers. As of
    01/22/03 we have built the code using Microsoft's Visual C++ 6.0 and GNU
    gcc/++ 3.2.1, 3.3, 3.4 and 4.0

NOTES

  o If you are building on a new platform (one for which we don't supply
    binaries), please run the tests and tell us about any failures. To do a
    really complete job of this you'll need to get the GNU test system called
    DejaGNU and the CppUnit unit testing package. It is very simple to
    install these and we're very willing to help, so don't be shy!

  o DEBUGGING AIDS

    - To enable debugging configure the source build by passing
      --enable-cedardebug=[1|2] (pass either 1 or 2 depending on the level
      of debugging you want). Passing 2 gives more debugging information
      using CedarDump.

    - In the past we used efence and dbnew to help debug dynamic memory
      programming errors. We are now using valgrind and suggest you do the
      same. On some Linux platforms you should export MALLOC_CHECK_=0 in the
      shell before running valgrind. This is true for the unit tests and may
      be true for other code. You'll also notice that the Makefile contains
      CXX and C compile-time flags for debugging. These will greatly simplify
      using valgrind and/or a debugger. To use these, don't hack up the
      Makefile.am. Instead export CXXFLAGS with the values you want and then
      run configure. For example:

	  export CXXFLAGS="-g3 -O0 -Wall -fno-defer-pop"; ./configure

CONFIGURATION AND TESTING

  o CONFIGURATION

    - There is no special configuration for the Cedar++ Library

  o TESTING

    - Once you have built the software you can run 'make check' to make sure
      that the software is working properly.

